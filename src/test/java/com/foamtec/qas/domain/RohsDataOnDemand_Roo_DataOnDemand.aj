// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.foamtec.qas.domain;

import com.foamtec.qas.domain.Rohs;
import com.foamtec.qas.domain.RohsDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect RohsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RohsDataOnDemand: @Component;
    
    private Random RohsDataOnDemand.rnd = new SecureRandom();
    
    private List<Rohs> RohsDataOnDemand.data;
    
    public Rohs RohsDataOnDemand.getNewTransientRohs(int index) {
        Rohs obj = new Rohs();
        setApprove1(obj, index);
        setApprove2(obj, index);
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setDescription(obj, index);
        setEndDate(obj, index);
        setMatCode(obj, index);
        setMsds(obj, index);
        setRohsDoc(obj, index);
        setSendEmailTo(obj, index);
        setSpec(obj, index);
        setStartDate(obj, index);
        setStatus(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        setWorkflow(obj, index);
        return obj;
    }
    
    public void RohsDataOnDemand.setApprove1(Rohs obj, int index) {
        String approve1 = "approve1_" + index;
        obj.setApprove1(approve1);
    }
    
    public void RohsDataOnDemand.setApprove2(Rohs obj, int index) {
        String approve2 = "approve2_" + index;
        obj.setApprove2(approve2);
    }
    
    public void RohsDataOnDemand.setCreatedBy(Rohs obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void RohsDataOnDemand.setCreatedDate(Rohs obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void RohsDataOnDemand.setDescription(Rohs obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void RohsDataOnDemand.setEndDate(Rohs obj, int index) {
        Date endDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDate(endDate);
    }
    
    public void RohsDataOnDemand.setMatCode(Rohs obj, int index) {
        String matCode = "matCode_" + index;
        obj.setMatCode(matCode);
    }
    
    public void RohsDataOnDemand.setMsds(Rohs obj, int index) {
        String msds = "msds_" + index;
        obj.setMsds(msds);
    }
    
    public void RohsDataOnDemand.setRohsDoc(Rohs obj, int index) {
        String rohsDoc = "rohsDoc_" + index;
        obj.setRohsDoc(rohsDoc);
    }
    
    public void RohsDataOnDemand.setSendEmailTo(Rohs obj, int index) {
        String sendEmailTo = "foo" + index + "@bar.com";
        obj.setSendEmailTo(sendEmailTo);
    }
    
    public void RohsDataOnDemand.setSpec(Rohs obj, int index) {
        String spec = "spec_" + index;
        obj.setSpec(spec);
    }
    
    public void RohsDataOnDemand.setStartDate(Rohs obj, int index) {
        Date startDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public void RohsDataOnDemand.setStatus(Rohs obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void RohsDataOnDemand.setUpdatedBy(Rohs obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void RohsDataOnDemand.setUpdatedDate(Rohs obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public void RohsDataOnDemand.setWorkflow(Rohs obj, int index) {
        String workflow = "workflow_" + index;
        obj.setWorkflow(workflow);
    }
    
    public Rohs RohsDataOnDemand.getSpecificRohs(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Rohs obj = data.get(index);
        Long id = obj.getId();
        return Rohs.findRohs(id);
    }
    
    public Rohs RohsDataOnDemand.getRandomRohs() {
        init();
        Rohs obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Rohs.findRohs(id);
    }
    
    public boolean RohsDataOnDemand.modifyRohs(Rohs obj) {
        return false;
    }
    
    public void RohsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Rohs.findRohsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Rohs' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Rohs>();
        for (int i = 0; i < 10; i++) {
            Rohs obj = getNewTransientRohs(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
